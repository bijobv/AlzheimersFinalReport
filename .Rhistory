? train
?train()
? train.
? train(x) \
??train
library(caret)
?train
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, caret, ranger, tree, glmnet, ISLR, ggplot2, Matrix)
# read the cleaned Alzheimers dataset
alzdata <- readRDS("knnalzdata.RDS")
set.seed(5003)
train_index <- createDataPartition(alzdata$Diagnosis, p = 0.7, list = FALSE)
train_data <- alzdata[train_index, ]
test_data <- alzdata[-train_index, ]
modelcv <- trainControl(
method = "repeatedcv",
number = 10,
repeats = 10,
search = "grid",
classProbs = TRUE,
summaryFunction = prSummary,
savePredictions = "all",
)
#model example for knn
###set.seed(5003)
###knn_model <- train(
### Diagnosis ~ .,
###data = train_data,
### method = "knn",
#tuneLength = 30,
###trControl = modelcv,
### preProcess = c("center", "scale"),
#metric = "AUC"
?nrow
nrow(alzdata)
nrow(train_data)/nrow(alzdata)
library(caret)
library(glmnet)
tune_grid <- expand.grid(alpha = 1, # alpha 1 denotes lasso regression model
lambda = seq(0.001, 0.1, length = 10))
lasso_model <- train(
Diagnosis ~ .,
data = train_data,
method = "glmnet",
tuneGrid = tune_grid,
trControl = modelcv,
)
library(Mlmetrics)
install.packages("MLmetrics")
library(Mlmetrics)
library(MLmetrics)
library(Mlmetrics)
library(MLmetrics)
lasso_model <- train(
Diagnosis ~ .,
data = train_data,
method = "glmnet",
tuneGrid = tune_grid,
trControl = modelcv,
)
# print the best lambda value
print(lasso_model$bestTune)
## lasso confusion matrix
lasso_predictions <- predict(lasso_model, newdata = test_data)
lasso_CM <- confusionMatrix(knn_predictions, test_data$Diagnosis, positive = "Alzheimers")
lasso_CM <- confusionMatrix(lasso_predictions, test_data$Diagnosis, positive = "Alzheimers")
print(lasso_CM)
#with adjusted probabilities
lasso_probs <- predict(lasso_model, newdata = test_data, type = "prob")
lasso_predictions_2 <- ifelse(knn_probs[, "Alzheimers"] > 0.35, "Alzheimers", "No_Alzheimers")
lasso_predictions_2 <- ifelse(lasso_probs[, "Alzheimers"] > 0.35, "Alzheimers", "No_Alzheimers")
lasso_predictions_2 <- factor(lasso_predictions_2, levels = c("No_Alzheimers", "Alzheimers"))
lasso_CM_2 <- confusionMatrix(lasso_predictions_2, test_data$Diagnosis, positive = "Alzheimers", mode = "everything")
lasso(lasso_CM_2)
print(lasso_CM_2)
# scaling train_data and test_data for lasso as lasso is sensitive to unscaled data
train_data <- scale(train_data)
# scaling train_data and test_data for lasso as lasso is sensitive to unscaled data
target <- train_data$target
predictors <- train_data %>% select(-target)
library(dplyr)
# scaling train_data and test_data for lasso as lasso is sensitive to unscaled data
target <- train_data$target
predictors <- train_data %>% select(-target)
scaled_predictors <- as.data.frame(scale(predictors))
predictors <- train_data %>% select(-target)
# scaling train_data and test_data for lasso as lasso is sensitive to unscaled data
target <- train_data$Diagnosis
predictors <- train_data %>% select(-target)
target
predictors <- train_data %>% select(-Diagnosis)
scaled_predictors <- as.data.frame(scale(predictors))
train_data <- cbind(scaled_predictors, Diagnosis=target)
# scaling test data
target <- test_data$Diagnosis
predictors <- test_data %>% select(-Diagnosis)
scaled_predictors <- as.data.frame(scale(predictors))
test_data <- cbind(scaled_predictors, Diagnosis=target)
# Train the model
lasso_model <- train(
Diagnosis ~ .,
data = train_data,
method = "glmnet",
tuneGrid = tune_grid,
trControl = modelcv,
)
# Train the model
lasso_model <- train(
Diagnosis ~ .,
data = train_data,
method = "glmnet",
tuneGrid = tune_grid,
trControl = modelcv,
)
# print the best lambda value
print(lasso_model$bestTune)
## lasso confusion matrix
lasso_predictions <- predict(lasso_model, newdata = test_data)
lasso_CM <- confusionMatrix(lasso_predictions, test_data$Diagnosis, positive = "Alzheimers")
print(lasso_CM)
#with adjusted probabilities
lasso_probs <- predict(lasso_model, newdata = test_data, type = "prob")
lasso_predictions_2 <- ifelse(lasso_probs[, "Alzheimers"] > 0.35, "Alzheimers", "No_Alzheimers")
lasso_predictions_2 <- factor(lasso_predictions_2, levels = c("No_Alzheimers", "Alzheimers"))
lasso_CM_2 <- confusionMatrix(lasso_predictions_2, test_data$Diagnosis, positive = "Alzheimers", mode = "everything")
print(lasso_CM_2)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, caret, ranger, tree, glmnet, ISLR, ggplot2, Matrix, dplyr, knitr, kableExtra, MASS, RColorBrewer, caTools, MLmetrics)
# read the cleaned Alzheimers dataset
alzdata <- readRDS("knnalzdata.RDS")
# Load required libraries
library(readr)   # To read CSV files
library(knitr)   # To format tables in a nice layout
library(kableExtra)
# Read the CSV file into a dataframe
data <- read_csv("dataset_description.csv", show_col_types = FALSE)
# Load required libraries
library(readr)   # To read CSV files
# Read the CSV file into a dataframe
data <- read_csv("dataset_description.csv", show_col_types = FALSE)
